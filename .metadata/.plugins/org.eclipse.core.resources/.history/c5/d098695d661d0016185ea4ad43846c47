
public class BinarySearchTree {

	private TreeNode root;
	private int size;
	
	
	public void add(Integer x){
		add(x,root);
	}
	
	public void add(Integer x, TreeNode node){
		if(size == 0) {
			root = new TreeNode(x);
			size++;
		}
		else{
			if(x <= node.getValue()){
				if(node.getNextLeft() == null) {
					node.setNextLeft(new TreeNode(x));
					size++;
				}
				else add(x,node.getNextLeft());
			}
			else{
				if(node.getNextRight() == null) {
					node.setNextRight(new TreeNode(x));
					size++;
				}
				else add(x,node.getNextRight());
			}
				
		}
	}
	
	public boolean contains(Integer x){return contains(x,root);}
	
	public boolean contains(Integer x, TreeNode node){
		if(node == null) return false;
		if(node.getValue() == x) return true;
		
		if(x <= node.getValue()){
			return contains(x,node.getNextLeft());
		}
		else{
			return contains(x,node.getNextRight());
		}
				
	}
	
	public int size(){return size;}
	
	public String toString(){
		return toString(root);
	}
	
	public String toString(TreeNode node){
		if(node == null)return "";
		return toString(node.getNextLeft())+" " + node.getValue() + " " + toString(node.getNextRight());
	}
	public String preorderToString(){return preorderToString(root);}
	public String preorderToString(TreeNode node){
		if(node == null)return "";
		return node.getValue() + " " + toString(node.getNextLeft()) + " " + toString(node.getNextRight());
	}
	
	public String postorderToString(){return postorderToString(root);}
	public String postorderToString(TreeNode node){
		if(node == null)return "";
		return toString(node.getNextLeft()) + " " + toString(node.getNextRight()) + " " + node.getValue();
	}
	
	public static void main(String[] args) {

	}

}
